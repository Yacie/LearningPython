p=True
q=True
print not (p or not q)

p=True
q=False
print not (p or not q)

p=False
q=True
print not (p or not q)

p=False
q=False
print not (p or not q)


n=123
print (n % 10) / 10
print ((n - n % 10) % 100) / 10
print (n // 10) % 10

#Implement the mathematical function
#f(x) = -5 x5 + 69 x2 - 47 as a Python function.
#Then use Python to compute the function values
#f(0), f(1), f(2), and f(3).
#Enter the maximum of these four numbers

class fx:
    def __init__(self,x):
        self.x=x
    def __str__(self):
        return ("You are MR.",str(self.x))

    def cl(self):
        #f(x) = -5 x5 + 69 x2 - 47
        self.a=-5*self.x**5+69*self.x**2-47
        print(self.a, "for", self.x)


a=fx(0)
a.cl()

a=fx(1)
a.cl()

a=fx(2)
a.cl()

a=fx(3)
a.cl()


#When investing money, an important concept to know is compound interest. The equation FV = PV (1+rate)periods relates the following four quantities.

#The present value (PV) of your money is how much money you have now.
#The future value (FV) of your money is how much money you will have in the future.
#The nominal interest rate per period (rate) is how much interest you earn during a particular length of time, before accounting for compounding. This is typically expressed as a percentage.
#The number of periods (periods) is how many periods in the future this calculation is for.

def future_value(present_value, annual_rate, periods_per_year, years):
    rate_per_period = annual_rate / periods_per_year
    periods = periods_per_year * years
    FV = present_value*(1+rate_per_period)**periods
    return FV





print ("$1000 at 2% compounded daily for 3 years yields $", future_value(1000, .02, 365, 3))
print(future_value(500, .04, 10, 10))

import math
def project_to_distance(point_x, point_y, distance):
    dist_to_origin = math.sqrt(point_x ** 2 + point_y ** 2)    
    scale = distance / dist_to_origin
    print point_x * scale, point_y * scale
    
project_to_distance(2, 7, 4)
